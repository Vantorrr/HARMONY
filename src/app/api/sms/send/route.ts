import { NextRequest, NextResponse } from 'next/server';
import crypto from 'crypto';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö SMS
interface SMSData {
  phone: string;
  code: string;
  timestamp: number;
  attempts: number;
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –ë–î)
declare global {
  var smsStorage: Map<string, SMSData> | undefined;
}

const getSMSStorage = () => {
  if (!global.smsStorage) {
    global.smsStorage = new Map<string, SMSData>();
  }
  return global.smsStorage;
};

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–¥–æ–≤ (—Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç)
const cleanupOldCodes = () => {
  const smsStorage = getSMSStorage();
  const now = Date.now();
  const expireTime = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
  
  for (const [phone, data] of smsStorage.entries()) {
    if (now - data.timestamp > expireTime) {
      smsStorage.delete(phone);
    }
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ SMSC.ru
const sendSMSViaProvider = async (phone: string, text: string): Promise<boolean> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è SMSC.ru
    if (process.env.SMSC_LOGIN && process.env.SMSC_PASSWORD) {
      console.log(`üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é SMS —á–µ—Ä–µ–∑ SMSC.ru –Ω–∞ ${phone}`);
      
      const response = await fetch('https://smsc.ru/sys/send.php', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          login: process.env.SMSC_LOGIN,
          psw: process.env.SMSC_PASSWORD,
          phones: phone,
          mes: text,
          fmt: '3', // JSON —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
          charset: 'utf-8'
          // –£–±–∏—Ä–∞–µ–º sender - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        })
      });

      const result = await response.json();
      console.log('üì§ –û—Ç–≤–µ—Ç SMSC.ru:', result);
      
      if (result.error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ SMSC.ru:', result.error_code, result.error);
        return false;
      }
      
      return true;
    } else {
      // –î–µ–º–æ —Ä–µ–∂–∏–º
      console.log(`üéÆ Demo —Ä–µ–∂–∏–º - SMS –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–æ –Ω–∞ ${phone}: ${text}`);
      return true;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error);
    return false;
  }
};

export async function POST(request: NextRequest) {
  try {
    const { phone } = await request.json();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (!phone || !/^7\d{10}$/.test(phone)) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞' },
        { status: 400 }
      );
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–¥–æ–≤
    cleanupOldCodes();

    // –ü–æ–ª—É—á–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    const smsStorage = getSMSStorage();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting (–Ω–µ –±–æ–ª–µ–µ 1 SMS –≤ –º–∏–Ω—É—Ç—É)
    const existingData = smsStorage.get(phone);
    if (existingData) {
      const timeSinceLastSMS = Date.now() - existingData.timestamp;
      if (timeSinceLastSMS < 60000) { // 60 —Å–µ–∫—É–Ω–¥
        const remainingTime = Math.ceil((60000 - timeSinceLastSMS) / 1000);
        return NextResponse.json(
          { 
            success: false, 
            error: `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ ${remainingTime} —Å–µ–∫` 
          },
          { status: 429 }
        );
      }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
    const code = process.env.SMSC_LOGIN && process.env.SMSC_PASSWORD ? 
      Math.floor(1000 + Math.random() * 9000).toString() : 
      '1234';
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    smsStorage.set(phone, {
      phone,
      code,
      timestamp: Date.now(),
      attempts: 0
    });

    // –¢–µ–∫—Å—Ç SMS (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤)
    const smsText = `–ö–æ–¥: ${code}`;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS
    const sent = await sendSMSViaProvider(phone, smsText);

    if (sent) {
      const isRealMode = process.env.SMSC_LOGIN && process.env.SMSC_PASSWORD;
      
      return NextResponse.json({ 
        success: true, 
        message: isRealMode ? 'SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä' : 'SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ...(!isRealMode && { debugCode: code })
      });
    } else {
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS' },
        { status: 500 }
      );
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ API SMS send:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// GET –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–¥–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
export async function GET(request: NextRequest) {
  if (process.env.NODE_ENV !== 'development') {
    return NextResponse.json({ error: 'Not allowed' }, { status: 403 });
  }

  const url = new URL(request.url);
  const phone = url.searchParams.get('phone');

  if (!phone) {
    return NextResponse.json({ error: 'Phone required' }, { status: 400 });
  }

  const smsStorage = getSMSStorage();
  const data = smsStorage.get(phone);
  if (!data) {
    return NextResponse.json({ error: 'No code found' }, { status: 404 });
  }

  return NextResponse.json({
    phone: data.phone,
    code: data.code,
    timestamp: data.timestamp,
    attempts: data.attempts,
    timeRemaining: Math.max(0, 600000 - (Date.now() - data.timestamp)) // 10 –º–∏–Ω—É—Ç
  });
}