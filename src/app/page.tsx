'use client';

import { useState, useEffect } from 'react';
import AuthModal from '@/components/AuthModal';
import ProfilePage from '@/components/ProfilePage';
import ClassManagement from '@/components/ClassManagement';
import LoyaltyProgram from '@/components/LoyaltyProgram';
import LoadingScreen from '@/components/LoadingScreen';
import BottomNavigation from '@/components/BottomNavigation';
import HomePage from '@/components/HomePage';
import { useAutoNotifications } from '@/hooks/useAutoNotifications';

export default function AppPage() {
  const [isLoading, setIsLoading] = useState(true);
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [showClassManagement, setShowClassManagement] = useState(false);
  const [showLoyaltyProgram, setShowLoyaltyProgram] = useState(false);
  const [userBonusPoints, setUserBonusPoints] = useState(1250);
  const [activeTab, setActiveTab] = useState<'home' | 'classes' | 'bonuses' | 'profile'>('home');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const { isEnabled: notificationsEnabled } = useAutoNotifications({
    enabled: isAuthenticated, // –≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    checkInterval: 1, // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è –¥–µ–º–æ
    reminderTime: 30, // –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 30 –º–∏–Ω—É—Ç
    expiryDays: 3, // –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è
    lowBalanceThreshold: 100 // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –±–∞–ª–∞–Ω—Å–µ –º–µ–Ω–µ–µ 100
  });

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const authData = localStorage.getItem('harmony_auth');
    if (authData) {
      const parsed = JSON.parse(authData);
      setIsAuthenticated(parsed.isAuthenticated);
    }
  }, []);

  const handleLoginClick = () => {
    setIsAuthModalOpen(true);
  };

  const handleAuthSuccess = () => {
    setIsAuthenticated(true);
    setIsAuthModalOpen(false);
  };

  const handleLogout = () => {
    setIsAuthenticated(false);
    setShowClassManagement(false);
    setShowLoyaltyProgram(false);
    setActiveTab('home');
  };

  const handleTabChange = (tab: 'home' | 'classes' | 'bonuses' | 'profile') => {
    setActiveTab(tab);
    
    // –°–±—Ä–æ—Å –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    setShowClassManagement(false);
    setShowLoyaltyProgram(false);

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–∫—Ä–∞–Ω—ã
    if (tab === 'classes') {
      setShowClassManagement(true);
    } else if (tab === 'bonuses') {
      setShowLoyaltyProgram(true);
    }
    // home –∏ profile –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ render –ª–æ–≥–∏–∫–µ
  };

  const handleLoadingComplete = () => {
    setIsLoading(false);
  };

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–∫—Ä–∞–Ω
  if (isAuthenticated) {
    return (
      <div className="min-h-screen bg-gray-50 pb-20">
        {showClassManagement && (
          <ClassManagement onBack={() => handleTabChange('home')} />
        )}
        {showLoyaltyProgram && (
          <LoyaltyProgram 
            onBack={() => handleTabChange('home')} 
            currentPoints={userBonusPoints}
            onPointsUpdate={setUserBonusPoints}
          />
        )}
        {!showClassManagement && !showLoyaltyProgram && activeTab === 'home' && (
          <HomePage 
            userName="–†–æ–¥–∏—Ç–µ–ª—å"
            userBonusPoints={userBonusPoints}
            onShowClassManagement={() => handleTabChange('classes')}
            onShowLoyaltyProgram={() => handleTabChange('bonuses')}
          />
        )}
        {!showClassManagement && !showLoyaltyProgram && activeTab === 'profile' && (
          <ProfilePage 
            onLogout={handleLogout} 
            onShowClassManagement={() => handleTabChange('classes')}
            onShowLoyaltyProgram={() => handleTabChange('bonuses')}
          />
        )}
        
        <BottomNavigation 
          activeTab={activeTab}
          onTabChange={handleTabChange}
        />
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  return (
    <div className="min-h-screen bg-gradient-to-br from-yellow-300 via-orange-400 to-red-500 flex items-center justify-center">
      <div className="text-center">
        {/* –õ–æ–≥–æ—Ç–∏–ø */}
        <div className="mb-8">
          <h1 className="text-6xl font-bold text-white mb-4 font-heading">
            üåà –ì–ê–†–ú–û–ù–ò–Ø üåà
          </h1>
          <p className="text-2xl text-white opacity-90">
            –¶–µ–Ω—Ç—Ä —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ–±–µ–Ω–∫–∞
          </p>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ */}
        <button
          onClick={handleLoginClick}
          className="bg-white text-orange-500 font-bold text-xl px-12 py-4 rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300"
        >
          üöÄ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
        </button>
      </div>
      
      <AuthModal
        isOpen={isAuthModalOpen}
        onClose={() => setIsAuthModalOpen(false)}
        onSuccess={handleAuthSuccess}
      />

      <LoadingScreen 
        isLoading={isLoading}
        onLoadingComplete={handleLoadingComplete}
      />
    </div>
  );
}