// –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Harmony Fitness
import { useEffect, useCallback } from 'react';
import { showLocalNotification, type NotificationPayload } from '@/lib/firebase';

interface UserData {
  phone: string;
  subscriptions: Array<{
    id: string;
    name: string;
    validUntil: string;
    sessionsLeft: number;
    isActive: boolean;
  }>;
  bonusPoints: number;
  upcomingClasses: Array<{
    id: string;
    name: string;
    date: string;
    time: string;
    confirmed: boolean;
  }>;
  notificationPreferences: {
    reminders: boolean;
    expiry: boolean;
    balance: boolean;
    promotions: boolean;
  };
}

interface AutoNotificationOptions {
  enabled: boolean;
  checkInterval?: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  reminderTime?: number; // –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –∑–∞–Ω—è—Ç–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å
  expiryDays?: number; // –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
  lowBalanceThreshold?: number; // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
}

export function useAutoNotifications(options: AutoNotificationOptions = { enabled: true }) {
  const {
    enabled = true,
    checkInterval = 5, // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    reminderTime = 30, // –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 30 –º–∏–Ω—É—Ç
    expiryDays = 3, // –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è
    lowBalanceThreshold = 100 // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –±–∞–ª–∞–Ω—Å–µ –º–µ–Ω–µ–µ 100
  } = options;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserData = useCallback((): UserData | null => {
    try {
      const authData = localStorage.getItem('harmony_auth');
      const profileData = localStorage.getItem('harmony_profile');
      const notificationPrefs = localStorage.getItem('harmony_notification_preferences');

      if (!authData || !profileData) return null;

      const auth = JSON.parse(authData);
      const profile = JSON.parse(profileData);
      const prefs = notificationPrefs ? JSON.parse(notificationPrefs) : {
        reminders: true,
        expiry: true,
        balance: true,
        promotions: false
      };

      return {
        phone: auth.phone,
        subscriptions: profile.subscriptions || [],
        bonusPoints: profile.bonusPoints || 0,
        upcomingClasses: profile.upcomingClasses || [],
        notificationPreferences: prefs
      };
    } catch (error) {
      console.error('Error getting user data:', error);
      return null;
    }
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–Ω—è—Ç–∏—è—Ö
  const checkClassReminders = useCallback((userData: UserData) => {
    if (!userData.notificationPreferences.reminders) return;

    const now = new Date();
    const reminderThreshold = new Date(now.getTime() + reminderTime * 60 * 1000);

    userData.upcomingClasses.forEach(cls => {
      const classDateTime = new Date(`${cls.date}T${cls.time}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–ª–∞—Å—Å –≤ –±–ª–∏–∂–∞–π—à–∏–µ reminderTime –º–∏–Ω—É—Ç
      if (classDateTime <= reminderThreshold && classDateTime > now && !cls.confirmed) {
        const minutesUntil = Math.floor((classDateTime.getTime() - now.getTime()) / (1000 * 60));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notificationKey = `reminder_${cls.id}_${cls.date}`;
        const sentNotifications = JSON.parse(localStorage.getItem('harmony_sent_notifications') || '[]');
        
        if (!sentNotifications.includes(notificationKey)) {
          const notification: NotificationPayload = {
            title: '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏',
            body: `${cls.name} –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ ${minutesUntil} –º–∏–Ω—É—Ç! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å —Ñ–æ—Ä–º—É –∏ –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ.`,
            icon: '/icon-reminder.png',
            data: {
              type: 'reminder',
              action: 'confirm',
              url: '/#classes'
            }
          };

          showLocalNotification(notification);
          
          // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
          sentNotifications.push(notificationKey);
          localStorage.setItem('harmony_sent_notifications', JSON.stringify(sentNotifications));
          
          console.log('üì± Class reminder sent:', cls.name);
        }
      }
    });
  }, [reminderTime]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
  const checkSubscriptionExpiry = useCallback((userData: UserData) => {
    if (!userData.notificationPreferences.expiry) return;

    const now = new Date();
    const expiryThreshold = new Date(now.getTime() + expiryDays * 24 * 60 * 60 * 1000);

    userData.subscriptions.forEach(sub => {
      if (!sub.isActive) return;

      const expiryDate = new Date(sub.validUntil);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫–∞–µ—Ç –ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
      if (expiryDate <= expiryThreshold && expiryDate > now) {
        const daysUntil = Math.ceil((expiryDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
        
        const notificationKey = `expiry_${sub.id}_${daysUntil}`;
        const sentNotifications = JSON.parse(localStorage.getItem('harmony_sent_notifications') || '[]');
        
        if (!sentNotifications.includes(notificationKey)) {
          let title, body;
          
          if (daysUntil === 1) {
            title = '‚ö†Ô∏è –ê–±–æ–Ω–µ–º–µ–Ω—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞!';
            body = `–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç "${sub.name}" –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ–≥–æ —Å–µ–≥–æ–¥–Ω—è —Å–æ —Å–∫–∏–¥–∫–æ–π!`;
          } else {
            title = '‚ö†Ô∏è –ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç';
            body = `–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç "${sub.name}" –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysUntil} –¥–Ω—è. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å!`;
          }

          const notification: NotificationPayload = {
            title,
            body,
            icon: '/icon-warning.png',
            data: {
              type: 'expiry',
              action: 'renew',
              url: '/#subscriptions'
            }
          };

          showLocalNotification(notification);
          
          sentNotifications.push(notificationKey);
          localStorage.setItem('harmony_sent_notifications', JSON.stringify(sentNotifications));
          
          console.log('üì± Subscription expiry warning sent:', sub.name);
        }
      }
    });
  }, [expiryDays]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∑–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
  const checkLowBalance = useCallback((userData: UserData) => {
    if (!userData.notificationPreferences.balance) return;

    if (userData.bonusPoints <= lowBalanceThreshold) {
      const notificationKey = `low_balance_${userData.bonusPoints}`;
      const sentNotifications = JSON.parse(localStorage.getItem('harmony_sent_notifications') || '[]');
      
      if (!sentNotifications.includes(notificationKey)) {
        const notification: NotificationPayload = {
          title: 'üí∞ –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤',
          body: `–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –æ—Å—Ç–∞–ª–æ—Å—å ${userData.bonusPoints} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤. –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤!`,
          icon: '/icon-money.png',
          data: {
            type: 'balance',
            action: 'view',
            url: '/#profile'
          }
        };

        showLocalNotification(notification);
        
        sentNotifications.push(notificationKey);
        localStorage.setItem('harmony_sent_notifications', JSON.stringify(sentNotifications));
        
        console.log('üì± Low balance warning sent:', userData.bonusPoints);
      }
    }
  }, [lowBalanceThreshold]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø—Ä–∏–º–µ—Ä—ã)
  const checkPromotions = useCallback((userData: UserData) => {
    if (!userData.notificationPreferences.promotions) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–º–æ
    const now = new Date();
    const dayOfWeek = now.getDay();
    const hour = now.getHours();
    const dateStr = now.toDateString();

    // –ü—Ä–∏–º–µ—Ä: —Å–∫–∏–¥–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ (–ø—è—Ç–Ω–∏—Ü–∞ –≤–µ—á–µ—Ä–æ–º)
    if (dayOfWeek === 5 && hour === 18) {
      const notificationKey = `weekend_promo_${dateStr}`;
      const sentNotifications = JSON.parse(localStorage.getItem('harmony_sent_notifications') || '[]');
      
      if (!sentNotifications.includes(notificationKey)) {
        const notification: NotificationPayload = {
          title: 'üéâ –í—ã—Ö–æ–¥–Ω—ã–µ —Å–æ —Å–∫–∏–¥–∫–æ–π!',
          body: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: -20% –Ω–∞ –≤—Å–µ –º–∞—Å—Å–∞–∂–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏!',
          icon: '/icon-promotion.png',
          image: '/weekend-promo.jpg',
          data: {
            type: 'promotion',
            action: 'view',
            url: '/#shop'
          }
        };

        showLocalNotification(notification);
        
        sentNotifications.push(notificationKey);
        localStorage.setItem('harmony_sent_notifications', JSON.stringify(sentNotifications));
        
        console.log('üì± Weekend promotion sent');
      }
    }

    // –ü—Ä–∏–º–µ—Ä: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —É—Ç—Ä–æ–º
    if (dayOfWeek === 1 && hour === 8) {
      const notificationKey = `monday_motivation_${dateStr}`;
      const sentNotifications = JSON.parse(localStorage.getItem('harmony_sent_notifications') || '[]');
      
      if (!sentNotifications.includes(notificationKey)) {
        const notification: NotificationPayload = {
          title: 'üí™ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –¥–µ–Ω—å —Å–∏–ª—ã!',
          body: '–ù–∞—á–Ω–∏—Ç–µ –Ω–µ–¥–µ–ª—é —Å —ç–Ω–µ—Ä–≥–∏–∏! –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã.',
          icon: '/icon-motivation.png',
          data: {
            type: 'promotion',
            action: 'view',
            url: '/#classes'
          }
        };

        showLocalNotification(notification);
        
        sentNotifications.push(notificationKey);
        localStorage.setItem('harmony_sent_notifications', JSON.stringify(sentNotifications));
        
        console.log('üì± Monday motivation sent');
      }
    }
  }, []);

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const checkNotifications = useCallback(() => {
    if (!enabled) return;

    const userData = getUserData();
    if (!userData) return;

    try {
      checkClassReminders(userData);
      checkSubscriptionExpiry(userData);
      checkLowBalance(userData);
      checkPromotions(userData);
    } catch (error) {
      console.error('Error checking notifications:', error);
    }
  }, [enabled, getUserData, checkClassReminders, checkSubscriptionExpiry, checkLowBalance, checkPromotions]);

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
  const cleanupOldNotifications = useCallback(() => {
    try {
      const sentNotifications = JSON.parse(localStorage.getItem('harmony_sent_notifications') || '[]');
      const notificationTimestamps = JSON.parse(localStorage.getItem('harmony_notification_timestamps') || '{}');
      
      const now = Date.now();
      const weekAgo = now - (7 * 24 * 60 * 60 * 1000);
      
      const cleanedNotifications = sentNotifications.filter((key: string) => {
        const timestamp = notificationTimestamps[key];
        return timestamp && timestamp > weekAgo;
      });
      
      localStorage.setItem('harmony_sent_notifications', JSON.stringify(cleanedNotifications));
      
      // –û—á–∏—â–∞–µ–º timestamps
      const cleanedTimestamps: any = {};
      cleanedNotifications.forEach((key: string) => {
        if (notificationTimestamps[key]) {
          cleanedTimestamps[key] = notificationTimestamps[key];
        }
      });
      localStorage.setItem('harmony_notification_timestamps', JSON.stringify(cleanedTimestamps));
      
    } catch (error) {
      console.error('Error cleaning up notifications:', error);
    }
  }, []);

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  useEffect(() => {
    if (!enabled) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É
    checkNotifications();
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    cleanupOldNotifications();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    const interval = setInterval(() => {
      checkNotifications();
    }, checkInterval * 60 * 1000);

    // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    const cleanupInterval = setInterval(cleanupOldNotifications, 24 * 60 * 60 * 1000);

    return () => {
      clearInterval(interval);
      clearInterval(cleanupInterval);
    };
  }, [enabled, checkInterval, checkNotifications, cleanupOldNotifications]);

  // –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const sendTestNotifications = useCallback(() => {
    console.log('üß™ Sending test notifications...');
    
    setTimeout(() => {
      showLocalNotification({
        title: '‚è∞ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
        body: '–í–∞—à–µ –∑–∞–Ω—è—Ç–∏–µ "–ô–æ–≥–∞" –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç!',
        icon: '/icon-reminder.png',
        data: { type: 'reminder', action: 'confirm' }
      });
    }, 1000);

    setTimeout(() => {
      showLocalNotification({
        title: '‚ö†Ô∏è –¢–µ—Å—Ç –∏—Å—Ç–µ—á–µ–Ω–∏—è',
        body: '–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç "–ì—Ä—É–ø–ø–æ–≤–æ–π –ë–µ–∑–ª–∏–º–∏—Ç" –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 2 –¥–Ω—è!',
        icon: '/icon-warning.png',
        data: { type: 'expiry', action: 'renew' }
      });
    }, 3000);

    setTimeout(() => {
      showLocalNotification({
        title: 'üí∞ –¢–µ—Å—Ç –±–∞–ª–∞–Ω—Å–∞',
        body: '–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –æ—Å—Ç–∞–ª–æ—Å—å 87 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤.',
        icon: '/icon-money.png', 
        data: { type: 'balance', action: 'view' }
      });
    }, 5000);

    setTimeout(() => {
      showLocalNotification({
        title: 'üî• –¢–µ—Å—Ç –∞–∫—Ü–∏–∏',
        body: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: —Å–∫–∏–¥–∫–∞ 25% –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è!',
        icon: '/icon-promotion.png',
        data: { type: 'promotion', action: 'view' }
      });
    }, 7000);
  }, []);

  return {
    checkNotifications,
    sendTestNotifications,
    cleanupOldNotifications,
    isEnabled: enabled
  };
}