'use client';

import { useState, useEffect } from 'react';

export interface Banner {
  id: string;
  title: string;
  subtitle: string;
  bg: string;
  icon: string;
  isActive: boolean;
  order: number;
  createdAt: Date;
}

const defaultBanners: Banner[] = [
  {
    id: '1',
    title: 'üéâ –°–ö–ò–î–ö–ê 30%',
    subtitle: '–Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!',
    bg: 'from-blue-400 to-red-400',
    icon: 'üéÅ',
    isActive: true,
    order: 1,
    createdAt: new Date()
  },
  {
    id: '2',
    title: 'üßò‚Äç‚ôÄÔ∏è –ô–û–ì–ê –î–õ–Ø –ú–ê–ú',
    subtitle: '–ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥ –≤ 19:00',
    bg: 'from-yellow-400 to-blue-500',
    icon: 'üå∏',
    isActive: true,
    order: 2,
    createdAt: new Date()
  }
];

export function useBanners() {
  const [banners, setBanners] = useState<Banner[]>(defaultBanners);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–Ω–Ω–µ—Ä–æ–≤ –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const savedBanners = localStorage.getItem('harmony_banners');
    if (savedBanners) {
      try {
        const parsed = JSON.parse(savedBanners);
        setBanners(parsed.map((banner: any) => ({
          ...banner,
          createdAt: new Date(banner.createdAt)
        })));
      } catch (error) {
        console.error('Error parsing banners:', error);
      }
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  const saveBanners = (newBanners: Banner[]) => {
    setBanners(newBanners);
    localStorage.setItem('harmony_banners', JSON.stringify(newBanners));
  };

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Ä—è–¥–∫—É
  const getActiveBanners = () => {
    return banners
      .filter(banner => banner.isActive)
      .sort((a, b) => a.order - b.order);
  };

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä
  const addBanner = (bannerData: Omit<Banner, 'id' | 'createdAt'>) => {
    const newBanner: Banner = {
      ...bannerData,
      id: Date.now().toString(),
      createdAt: new Date()
    };
    const newBanners = [...banners, newBanner];
    saveBanners(newBanners);
  };

  // –û–±–Ω–æ–≤–∏—Ç—å –±–∞–Ω–Ω–µ—Ä
  const updateBanner = (id: string, updates: Partial<Banner>) => {
    const newBanners = banners.map(banner =>
      banner.id === id ? { ...banner, ...updates } : banner
    );
    saveBanners(newBanners);
  };

  // –£–¥–∞–ª–∏—Ç—å –±–∞–Ω–Ω–µ—Ä
  const deleteBanner = (id: string) => {
    const newBanners = banners.filter(banner => banner.id !== id);
    saveBanners(newBanners);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–∞–Ω–Ω–µ—Ä–∞
  const toggleBannerActive = (id: string) => {
    updateBanner(id, { 
      isActive: !banners.find(b => b.id === id)?.isActive 
    });
  };

  // –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –±–∞–Ω–Ω–µ—Ä–∞
  const reorderBanner = (id: string, newOrder: number) => {
    updateBanner(id, { order: newOrder });
  };

  return {
    banners,
    activeBanners: getActiveBanners(),
    addBanner,
    updateBanner,
    deleteBanner,
    toggleBannerActive,
    reorderBanner
  };
}