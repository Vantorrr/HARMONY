// –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ localStorage
import { useState, useEffect } from 'react';
import { subscriptionPlans as initialPlans, type SubscriptionPlan } from '@/data/subscriptions';

const STORAGE_KEY = 'harmony_subscription_plans';

export function useSubscriptionPlans() {
  const [plans, setPlans] = useState<SubscriptionPlan[]>([]);
  const [loading, setLoading] = useState(true);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
  useEffect(() => {
    const savedPlans = localStorage.getItem(STORAGE_KEY);
    if (savedPlans) {
      try {
        setPlans(JSON.parse(savedPlans));
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:', error);
        setPlans(initialPlans);
        savePlans(initialPlans);
      }
    } else {
      setPlans(initialPlans);
      savePlans(initialPlans);
    }
    setLoading(false);
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
  const savePlans = (newPlans: SubscriptionPlan[]) => {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(newPlans));
    setPlans(newPlans);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    window.dispatchEvent(new CustomEvent('subscriptionPlansUpdated', { 
      detail: newPlans 
    }));
  };

  // –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–±—Ä–æ—Å –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º –¥–µ—Ç—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞
  const resetToDefaults = () => {
    console.log('üîÑ –°–±—Ä–æ—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –¥–µ—Ç—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞');
    localStorage.removeItem(STORAGE_KEY);
    setPlans(initialPlans);
    savePlans(initialPlans);
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
  const createPlan = (planData: Omit<SubscriptionPlan, 'id' | 'createdAt' | 'updatedAt'>) => {
    const newPlan: SubscriptionPlan = {
      ...planData,
      id: `plan_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      createdAt: new Date().toISOString().split('T')[0],
      updatedAt: new Date().toISOString().split('T')[0],
    };

    const updatedPlans = [...plans, newPlan];
    savePlans(updatedPlans);
    
    return newPlan;
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
  const updatePlan = (id: string, updates: Partial<SubscriptionPlan>) => {
    const updatedPlans = plans.map(plan => 
      plan.id === id 
        ? { 
            ...plan, 
            ...updates, 
            updatedAt: new Date().toISOString().split('T')[0] 
          }
        : plan
    );
    
    savePlans(updatedPlans);
    return updatedPlans.find(p => p.id === id);
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
  const deletePlan = (id: string) => {
    const updatedPlans = plans.filter(plan => plan.id !== id);
    savePlans(updatedPlans);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const toggleActive = (id: string) => {
    const plan = plans.find(p => p.id === id);
    if (plan) {
      updatePlan(id, { isActive: !plan.isActive });
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
  const togglePopular = (id: string) => {
    const plan = plans.find(p => p.id === id);
    if (plan) {
      updatePlan(id, { isPopular: !plan.isPopular });
    }
  };

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
  const duplicatePlan = (id: string) => {
    const plan = plans.find(p => p.id === id);
    if (plan) {
      const duplicatedPlan = {
        ...plan,
        name: `${plan.name} (–∫–æ–ø–∏—è)`,
        isPopular: false,
        createdBy: 'admin'
      };
      
      // –£–¥–∞–ª—è–µ–º id –∏ –¥–∞—Ç—ã —á—Ç–æ–±—ã createPlan —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–µ
      const { id: _, createdAt: __, updatedAt: ___, ...planData } = duplicatedPlan;
      return createPlan(planData);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
  const getActivePlans = () => plans.filter(plan => plan.isActive);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
  const getPopularPlans = () => plans.filter(plan => plan.isPopular && plan.isActive);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const getStats = () => ({
    total: plans.length,
    active: plans.filter(p => p.isActive).length,
    popular: plans.filter(p => p.isPopular).length,
    inactive: plans.filter(p => !p.isActive).length,
  });

  return {
    plans,
    loading,
    createPlan,
    updatePlan,
    deletePlan,
    toggleActive,
    togglePopular,
    duplicatePlan,
    getActivePlans,
    getPopularPlans,
    getStats,
    resetToDefaults // –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
  };
}